[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Private Build Java 1.8.0_342)
[debug] Load.defaultLoad until apply took 48.001128ms
[debug]                 Load.loadUnit: plugins took 41.4832ms
[debug]                 Load.loadUnit: defsScala took 0.215895ms
[debug] [Loading] Scanning directory /home/haoyangl/spark-test-apps/project/project
[debug]                   Load.loadUnit: mkEval took 4.808679ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/haoyangl/spark-test-apps/project/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.018211 ms
[info] loading settings for project spark-test-apps-build-build from metals.sbt ...
[debug]                     Load.resolveProject(spark-test-apps-build-build) took 29.609255ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id spark-test-apps-build-build, base: /home/haoyangl/spark-test-apps/project/project, plugins: List(<none>))) took 55.298596ms
[debug] [Loading] Done in /home/haoyangl/spark-test-apps/project/project, returning: (spark-test-apps-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 491.103847ms
[debug]                 Load.loadUnit: cleanEvalClasses took 4.15475ms
[debug]               Load.loadUnit(file:/home/haoyangl/spark-test-apps/project/project/, ...) took 540.354175ms
[debug]             Load.apply: load took 601.164306ms
[debug]             Load.apply: resolveProjects took 3.232885ms
[debug]             Load.apply: finalTransforms took 32.600943ms
[debug]             Load.apply: config.delegates took 4.477147ms
[debug]             Load.apply: Def.make(settings)... took 217.310364ms
[debug]             Load.apply: structureIndex took 59.106469ms
[debug]             Load.apply: mkStreams took 0.988116ms
[info] loading project definition from /home/haoyangl/spark-test-apps/project/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 1405.229573ms
[debug]           Load.loadUnit: defsScala took 0.002794ms
[debug] [Loading] Scanning directory /home/haoyangl/spark-test-apps/project
[debug]             Load.loadUnit: mkEval took 0.159256ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/haoyangl/spark-test-apps/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.365097 ms
[info] loading settings for project spark-test-apps-build from metals.sbt ...
[debug]               Load.resolveProject(spark-test-apps-build) took 12.398142ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-test-apps-build, base: /home/haoyangl/spark-test-apps/project, plugins: List(<none>))) took 14.152739ms
[debug] [Loading] Done in /home/haoyangl/spark-test-apps/project, returning: (spark-test-apps-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 25.304749ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.286885ms
[debug]         Load.loadUnit(file:/home/haoyangl/spark-test-apps/project/, ...) took 1431.241374ms
[debug]       Load.apply: load took 1432.114238ms
[debug]       Load.apply: resolveProjects took 0.078ms
[debug]       Load.apply: finalTransforms took 9.016375ms
[debug]       Load.apply: config.delegates took 0.259356ms
[debug]       Load.apply: Def.make(settings)... took 48.037645ms
[debug]       Load.apply: structureIndex took 18.102263ms
[debug]       Load.apply: mkStreams took 0.001661ms
[info] loading project definition from /home/haoyangl/spark-test-apps/project
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[success] Generated .bloop/spark-test-apps-build.json
[success] Total time: 1 s, completed Aug 24, 2022 3:15:49 PM
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2822.484338ms
[debug]     Load.loadUnit: defsScala took 0.002184ms
[debug] [Loading] Scanning directory /home/haoyangl/spark-test-apps
[debug]       Load.loadUnit: mkEval took 0.100818ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/haoyangl/spark-test-apps, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.179785 ms
[info] loading settings for project spark-test-apps from build.sbt ...
[debug]         Load.resolveProject(spark-test-apps) took 11.731708ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-test-apps, base: /home/haoyangl/spark-test-apps, plugins: List(<none>))) took 13.234593ms
[debug] [Loading] Done in /home/haoyangl/spark-test-apps, returning: (spark-test-apps)
[debug]     Load.loadUnit: loadedProjectsRaw took 26.800296ms
[debug]     Load.loadUnit: cleanEvalClasses took 0.62409ms
[debug]   Load.loadUnit(file:/home/haoyangl/spark-test-apps/, ...) took 2850.753532ms
[debug] Load.apply: load took 2861.791387ms
[debug] Load.apply: resolveProjects took 0.086577ms
[debug] Load.apply: finalTransforms took 7.643656ms
[debug] Load.apply: config.delegates took 0.245031ms
[debug] Load.apply: Def.make(settings)... took 37.631093ms
[debug] Load.apply: structureIndex took 12.820553ms
[debug] Load.apply: mkStreams took 0.001785ms
[info] set current project to Test Spark Apps (in build file:/home/haoyangl/spark-test-apps/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(bloopInstall, None, None)
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
